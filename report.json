{"created": 1748775923.266702, "duration": 3.2200677394866943, "exitcode": 1, "root": "/app", "environment": {}, "summary": {"passed": 45, "failed": 3, "xpassed": 1, "xfailed": 4, "total": 53, "collected": 53}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/test_anomalies.py", "outcome": "passed", "result": [{"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_global", "type": "Function", "lineno": 15}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_rolling", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_iqr", "type": "Function", "lineno": 38}, {"nodeid": "tests/test_anomalies.py::test_zscore_empty_series", "type": "Function", "lineno": 49}, {"nodeid": "tests/test_anomalies.py::test_iqr_all_nan_series", "type": "Function", "lineno": 55}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series", "type": "Function", "lineno": 61}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series_window", "type": "Function", "lineno": 68}]}, {"nodeid": "tests/test_config_utils.py", "outcome": "passed", "result": [{"nodeid": "tests/test_config_utils.py::test_gather_settings", "type": "Function", "lineno": 25}, {"nodeid": "tests/test_config_utils.py::test_apply_settings", "type": "Function", "lineno": 56}, {"nodeid": "tests/test_config_utils.py::test_apply_settings_missing_keys", "type": "Function", "lineno": 77}, {"nodeid": "tests/test_config_utils.py::test_apply_settings_handles_none_values", "type": "Function", "lineno": 94}]}, {"nodeid": "tests/test_database.py", "outcome": "passed", "result": [{"nodeid": "tests/test_database.py::test_connect_postgres_success", "type": "Function", "lineno": 13}, {"nodeid": "tests/test_database.py::test_connect_postgres_failure", "type": "Function", "lineno": 23}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_success", "type": "Function", "lineno": 31}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_failure", "type": "Function", "lineno": 43}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_hosts_success", "type": "Function", "lineno": 56}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_ping_false", "type": "Function", "lineno": 69}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_connection_error", "type": "Function", "lineno": 81}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_success", "type": "Function", "lineno": 108}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_no_hits", "type": "Function", "lineno": 128}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_error", "type": "Function", "lineno": 140}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_no_connection", "type": "Function", "lineno": 152}]}, {"nodeid": "tests/test_decomposition.py", "outcome": "passed", "result": [{"nodeid": "tests/test_decomposition.py::test_decompose_time_series_additive", "type": "Function", "lineno": 12}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_multiplicative", "type": "Function", "lineno": 20}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_datetimeindex", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_insufficient_data", "type": "Function", "lineno": 32}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_period_no_freq", "type": "Function", "lineno": 38}]}, {"nodeid": "tests/test_feature_engineering.py", "outcome": "passed", "result": [{"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_normal", "type": "Function", "lineno": 64}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_constant", "type": "Function", "lineno": 67}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_normal", "type": "Function", "lineno": 71}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_normal", "type": "Function", "lineno": 73}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_normal", "type": "Function", "lineno": 75}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_normal", "type": "Function", "lineno": 77}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_basic", "type": "Function", "lineno": 84}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_no_relevant_events", "type": "Function", "lineno": 106}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_empty_target_series", "type": "Function", "lineno": 114}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_no_datetimeindex_target", "type": "Function", "lineno": 119}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_top_n_logic", "type": "Function", "lineno": 124}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_with_events_and_global_types", "type": "Function", "lineno": 141}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_no_events_with_global_types", "type": "Function", "lineno": 158}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_normal", "type": "Function", "lineno": 177}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_short_series", "type": "Function", "lineno": 182}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_very_short_series", "type": "Function", "lineno": 188}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_empty_series", "type": "Function", "lineno": 193}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_constant_series", "type": "Function", "lineno": 218}]}, {"nodeid": "tests/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/test_main.py::test_placeholder", "type": "Function", "lineno": 10}]}, {"nodeid": "tests/test_profiling.py", "outcome": "passed", "result": [{"nodeid": "tests/test_profiling.py::test_get_series_summary_stats", "type": "Function", "lineno": 15}, {"nodeid": "tests/test_profiling.py::test_get_missing_values_summary", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_non_stationary", "type": "Function", "lineno": 33}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_random_noise", "type": "Function", "lineno": 43}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_trend_series", "type": "Function", "lineno": 52}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_empty_series", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_all_nan_series", "type": "Function", "lineno": 65}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_anomalies.py", "type": "Module"}, {"nodeid": "tests/test_config_utils.py", "type": "Module"}, {"nodeid": "tests/test_database.py", "type": "Module"}, {"nodeid": "tests/test_decomposition.py", "type": "Module"}, {"nodeid": "tests/test_feature_engineering.py", "type": "Module"}, {"nodeid": "tests/test_main.py", "type": "Module"}, {"nodeid": "tests/test_profiling.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_global", "lineno": 15, "outcome": "passed", "keywords": ["test_detect_anomalies_zscore_global", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00232685099945229, "outcome": "passed"}, "call": {"duration": 0.004333369999585557, "outcome": "passed"}, "teardown": {"duration": 0.00045353200039244257, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_rolling", "lineno": 26, "outcome": "passed", "keywords": ["test_detect_anomalies_zscore_rolling", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0013739009991695639, "outcome": "passed"}, "call": {"duration": 0.004687093000029563, "outcome": "passed"}, "teardown": {"duration": 0.0003727309995156247, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_iqr", "lineno": 38, "outcome": "passed", "keywords": ["test_detect_anomalies_iqr", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0011215979993721703, "outcome": "passed"}, "call": {"duration": 0.0043900059990846785, "outcome": "passed"}, "teardown": {"duration": 0.00035145299989380874, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_empty_series", "lineno": 49, "outcome": "passed", "keywords": ["test_zscore_empty_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00025672800074971747, "outcome": "passed"}, "call": {"duration": 0.0005354340009944281, "outcome": "passed"}, "teardown": {"duration": 0.000334095999278361, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_iqr_all_nan_series", "lineno": 55, "outcome": "passed", "keywords": ["test_iqr_all_nan_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00041508600043016486, "outcome": "passed"}, "call": {"duration": 0.0008669340004416881, "outcome": "passed"}, "teardown": {"duration": 0.0003199359998689033, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series", "lineno": 61, "outcome": "passed", "keywords": ["test_zscore_constant_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0003707569994730875, "outcome": "passed"}, "call": {"duration": 0.0029061820005154004, "outcome": "passed"}, "teardown": {"duration": 0.0003228780005883891, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series_window", "lineno": 68, "outcome": "passed", "keywords": ["test_zscore_constant_series_window", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00034291699921595864, "outcome": "passed"}, "call": {"duration": 0.005981756001347094, "outcome": "passed"}, "teardown": {"duration": 0.00021862900030100718, "outcome": "passed"}}, {"nodeid": "tests/test_config_utils.py::test_gather_settings", "lineno": 25, "outcome": "failed", "keywords": ["test_gather_settings", "test_config_utils.py", "tests", "app", ""], "setup": {"duration": 0.0009101309988182038, "outcome": "passed"}, "call": {"duration": 0.004877847000898328, "outcome": "failed", "crash": {"path": "/app/tests/test_config_utils.py", "lineno": 46, "message": "AssertionError: assert <MagicMock na...095488276896'> == ['device_id']\n  \n  Use -v to get more diff"}, "traceback": [{"path": "tests/test_config_utils.py", "lineno": 46, "message": "AssertionError"}], "longrepr": "mock_st_session_state = <MagicMock id='140095489596272'>\n\n    def test_gather_settings(mock_st_session_state):\n        with patch('src.config_utils.st.session_state', mock_st_session_state):\n            # Populate mock session state\n            mock_st_session_state.time_series_specs['id_cols'] = ['device_id']\n            mock_st_session_state.time_series_specs['timestamp_col'] = 'time_col'\n            mock_st_session_state.time_series_specs['value_cols'] = ['val1', 'val2']\n            mock_st_session_state.time_series_specs['selected_id'] = 'dev1'\n            mock_st_session_state.time_series_specs['selected_value_col_for_analysis'] = 'val1'\n    \n            mock_st_session_state.if_contam_general = 0.05\n            mock_st_session_state.ocsvm_nu_general = 0.02\n            mock_st_session_state.ocsvm_kernel_general = \"linear\"\n            mock_st_session_state.ocsvm_gamma_general = \"auto\"\n            mock_st_session_state.kmeans_k_final_general = 4\n            mock_st_session_state.scale_data_clustering_kmeans_general = False\n            mock_st_session_state.dbscan_eps_general = 0.7\n            mock_st_session_state.scale_data_clustering_dbscan_general = True\n    \n    \n            settings = gather_settings_for_save()\n>           assert settings['time_series_settings']['id_cols'] == ['device_id']\nE           AssertionError: assert <MagicMock na...095488276896'> == ['device_id']\nE             \nE             Use -v to get more diff\n\ntests/test_config_utils.py:46: AssertionError"}, "teardown": {"duration": 0.0005496630001289304, "outcome": "passed"}}, {"nodeid": "tests/test_config_utils.py::test_apply_settings", "lineno": 56, "outcome": "failed", "keywords": ["test_apply_settings", "test_config_utils.py", "tests", "app", ""], "setup": {"duration": 0.0010961299994960427, "outcome": "passed"}, "call": {"duration": 0.0033842410011857282, "outcome": "failed", "crash": {"path": "/app/tests/test_config_utils.py", "lineno": 69, "message": "KeyError: 'id_cols'"}, "traceback": [{"path": "tests/test_config_utils.py", "lineno": 69, "message": "KeyError"}], "longrepr": "mock_st_session_state = <MagicMock id='140095484099840'>\n\n    def test_apply_settings(mock_st_session_state):\n        with patch('src.config_utils.st.session_state', mock_st_session_state):\n            sample_settings = {\n                \"time_series_settings\": {\"id_cols\": [\"new_id\"], \"timestamp_col\": \"new_ts\", \"selected_id\": \"d100\"},\n                \"anomaly_detection_settings\": {\"IsolationForest\": {\"contamination\": 0.11}},\n                \"clustering_settings\": {\n                    \"KMeans\": {\"k_final\": 5, \"scale_data\": False },\n                    \"DBSCAN\": {\"eps\": 0.75, \"scale_data\": True}\n                }\n            }\n            success, msg = apply_loaded_settings_to_session_state(sample_settings)\n            assert success\n>           assert mock_st_session_state.time_series_specs['id_cols'] == [\"new_id\"]\nE           KeyError: 'id_cols'\n\ntests/test_config_utils.py:69: KeyError"}, "teardown": {"duration": 0.0003266709991294192, "outcome": "passed"}}, {"nodeid": "tests/test_config_utils.py::test_apply_settings_missing_keys", "lineno": 77, "outcome": "failed", "keywords": ["test_apply_settings_missing_keys", "test_config_utils.py", "tests", "app", ""], "setup": {"duration": 0.0011065170001529623, "outcome": "passed"}, "call": {"duration": 0.0038600619991484564, "outcome": "failed", "crash": {"path": "/app/tests/test_config_utils.py", "lineno": 90, "message": "KeyError: 'timestamp_col'"}, "traceback": [{"path": "tests/test_config_utils.py", "lineno": 90, "message": "KeyError"}], "longrepr": "mock_st_session_state = <MagicMock id='140095484230912'>\n\n    def test_apply_settings_missing_keys(mock_st_session_state):\n        with patch('src.config_utils.st.session_state', mock_st_session_state):\n            # Pre-populate some state\n            mock_st_session_state.time_series_specs['id_cols'] = ['old_id']\n            mock_st_session_state.if_contam_general = 0.01\n    \n            partial_settings = {\n                \"time_series_settings\": {\"timestamp_col\": \"partial_ts_col\"}\n                # Other settings like anomaly_detection or clustering are missing\n            }\n            success, _ = apply_loaded_settings_to_session_state(partial_settings)\n            assert success\n>           assert mock_st_session_state.time_series_specs['timestamp_col'] == \"partial_ts_col\"\nE           KeyError: 'timestamp_col'\n\ntests/test_config_utils.py:90: KeyError"}, "teardown": {"duration": 0.0005499650014826329, "outcome": "passed"}}, {"nodeid": "tests/test_config_utils.py::test_apply_settings_handles_none_values", "lineno": 94, "outcome": "passed", "keywords": ["test_apply_settings_handles_none_values", "test_config_utils.py", "tests", "app", ""], "setup": {"duration": 0.0010442679995321669, "outcome": "passed"}, "call": {"duration": 0.0005637930007651448, "outcome": "passed"}, "teardown": {"duration": 0.0003166900005453499, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_postgres_success", "lineno": 13, "outcome": "passed", "keywords": ["test_connect_postgres_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00029414799973892514, "outcome": "passed"}, "call": {"duration": 0.001960125000550761, "outcome": "passed"}, "teardown": {"duration": 0.00017902999934449326, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_postgres_failure", "lineno": 23, "outcome": "passed", "keywords": ["test_connect_postgres_failure", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001945570002135355, "outcome": "passed"}, "call": {"duration": 0.00173634099883202, "outcome": "passed"}, "teardown": {"duration": 0.00027132399918627925, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_success", "lineno": 31, "outcome": "passed", "keywords": ["test_fetch_postgres_data_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0002468250004312722, "outcome": "passed"}, "call": {"duration": 0.0021736929993494414, "outcome": "passed"}, "teardown": {"duration": 0.00035769799978879746, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_failure", "lineno": 43, "outcome": "passed", "keywords": ["test_fetch_postgres_data_failure", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0002139429998351261, "outcome": "passed"}, "call": {"duration": 0.0023660349997953745, "outcome": "passed"}, "teardown": {"duration": 0.00023810099992260803, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_hosts_success", "lineno": 56, "outcome": "passed", "keywords": ["test_connect_elasticsearch_hosts_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0003224720003345283, "outcome": "passed"}, "call": {"duration": 0.003048288999707438, "outcome": "passed"}, "teardown": {"duration": 0.00020397000116645359, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_ping_false", "lineno": 69, "outcome": "passed", "keywords": ["test_connect_elasticsearch_ping_false", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00027973599935648963, "outcome": "passed"}, "call": {"duration": 0.0027530110000952845, "outcome": "passed"}, "teardown": {"duration": 0.00022674700085190125, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_connection_error", "lineno": 81, "outcome": "passed", "keywords": ["test_connect_elasticsearch_connection_error", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00023531499937234912, "outcome": "passed"}, "call": {"duration": 0.0022006889994372614, "outcome": "passed"}, "teardown": {"duration": 0.0002657690001797164, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_success", "lineno": 108, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00019896300000254996, "outcome": "passed"}, "call": {"duration": 0.004263893999450374, "outcome": "passed"}, "teardown": {"duration": 0.0002735460002440959, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_no_hits", "lineno": 128, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_no_hits", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00022497200006910134, "outcome": "passed"}, "call": {"duration": 0.004340307999882498, "outcome": "passed"}, "teardown": {"duration": 0.0003114850005658809, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_error", "lineno": 140, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_error", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001887239995994605, "outcome": "passed"}, "call": {"duration": 0.002547654001318733, "outcome": "passed"}, "teardown": {"duration": 0.00022483800057671033, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_no_connection", "lineno": 152, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_no_connection", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00023682900064159185, "outcome": "passed"}, "call": {"duration": 0.0005233079991739942, "outcome": "passed"}, "teardown": {"duration": 0.00024633400062157307, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_additive", "lineno": 12, "outcome": "passed", "keywords": ["test_decompose_time_series_additive", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0010512629996810574, "outcome": "passed"}, "call": {"duration": 0.002111681000315002, "outcome": "passed"}, "teardown": {"duration": 0.00028461900001275353, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_multiplicative", "lineno": 20, "outcome": "passed", "keywords": ["test_decompose_time_series_multiplicative", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0010182179994444596, "outcome": "passed"}, "call": {"duration": 0.002397289001237368, "outcome": "passed"}, "teardown": {"duration": 0.0004646920006052824, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_datetimeindex", "lineno": 26, "outcome": "passed", "keywords": ["test_decompose_time_series_no_datetimeindex", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0003553319984348491, "outcome": "passed"}, "call": {"duration": 0.0005232600015006028, "outcome": "passed"}, "teardown": {"duration": 0.0002482349991623778, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_insufficient_data", "lineno": 32, "outcome": "passed", "keywords": ["test_decompose_time_series_insufficient_data", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0008123939987854101, "outcome": "passed"}, "call": {"duration": 0.0008811909992800793, "outcome": "passed"}, "teardown": {"duration": 0.00035355799991521053, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_period_no_freq", "lineno": 38, "outcome": "passed", "keywords": ["test_decompose_time_series_no_period_no_freq", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0002926560009655077, "outcome": "passed"}, "call": {"duration": 0.004620391000571544, "outcome": "passed"}, "teardown": {"duration": 0.000347629000316374, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_normal", "lineno": 64, "outcome": "passed", "keywords": ["test_extract_basic_stats_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.001119475999075803, "outcome": "passed"}, "call": {"duration": 0.005271914998957072, "outcome": "passed"}, "teardown": {"duration": 0.00031683800079918, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_constant", "lineno": 67, "outcome": "passed", "keywords": ["test_extract_basic_stats_constant", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0009267909990740009, "outcome": "passed"}, "call": {"duration": 0.004793333000634448, "outcome": "passed"}, "teardown": {"duration": 0.00028487300005508587, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_normal", "lineno": 71, "outcome": "passed", "keywords": ["test_extract_trend_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0010257429985358613, "outcome": "passed"}, "call": {"duration": 0.0010750370001915144, "outcome": "passed"}, "teardown": {"duration": 0.00040391000038653146, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_normal", "lineno": 73, "outcome": "passed", "keywords": ["test_extract_volatility_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008567040003981674, "outcome": "passed"}, "call": {"duration": 0.0013371500008361181, "outcome": "passed"}, "teardown": {"duration": 0.0002628050006023841, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_normal", "lineno": 75, "outcome": "passed", "keywords": ["test_extract_autocorrelation_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0009002930000860943, "outcome": "passed"}, "call": {"duration": 0.0007296820003830362, "outcome": "passed"}, "teardown": {"duration": 0.00020988599862903357, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_normal", "lineno": 77, "outcome": "xpassed", "keywords": ["test_extract_rolling_stats_features_normal", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008403210013057105, "outcome": "passed"}, "call": {"duration": 0.00287511100032134, "outcome": "passed"}, "teardown": {"duration": 0.00019326599976920988, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_basic", "lineno": 84, "outcome": "passed", "keywords": ["test_extract_event_features_basic", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.002015718999246019, "outcome": "passed"}, "call": {"duration": 0.006767250999473617, "outcome": "passed"}, "teardown": {"duration": 0.00038021200089133345, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_no_relevant_events", "lineno": 106, "outcome": "passed", "keywords": ["test_extract_event_features_no_relevant_events", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0005716969990317011, "outcome": "passed"}, "call": {"duration": 0.001829351000196766, "outcome": "passed"}, "teardown": {"duration": 0.000269252001089626, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_empty_target_series", "lineno": 114, "outcome": "passed", "keywords": ["test_extract_event_features_empty_target_series", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0015413359997182852, "outcome": "passed"}, "call": {"duration": 0.00033901700044225436, "outcome": "passed"}, "teardown": {"duration": 0.00020220499936840497, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_no_datetimeindex_target", "lineno": 119, "outcome": "passed", "keywords": ["test_extract_event_features_no_datetimeindex_target", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.00134394499946211, "outcome": "passed"}, "call": {"duration": 0.0004026259994134307, "outcome": "passed"}, "teardown": {"duration": 0.0003109009994659573, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_event_features_top_n_logic", "lineno": 124, "outcome": "passed", "keywords": ["test_extract_event_features_top_n_logic", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0005821180002385518, "outcome": "passed"}, "call": {"duration": 0.007169176999013871, "outcome": "passed"}, "teardown": {"duration": 0.00036365499909152277, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_with_events_and_global_types", "lineno": 141, "outcome": "passed", "keywords": ["test_generate_all_features_with_events_and_global_types", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0023836480013414985, "outcome": "passed"}, "call": {"duration": 0.019208542000342277, "outcome": "passed"}, "teardown": {"duration": 0.0004238719993736595, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_no_events_with_global_types", "lineno": 158, "outcome": "passed", "keywords": ["test_generate_all_features_no_events_with_global_types", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.001040068000293104, "outcome": "passed"}, "call": {"duration": 0.013703958999030874, "outcome": "passed"}, "teardown": {"duration": 0.00024837199998728465, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_normal", "lineno": 177, "outcome": "xfailed", "keywords": ["test_generate_all_features_normal", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0010008030003518797, "outcome": "passed"}, "call": {"duration": 0.01611505999971996, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 181, "message": "AssertionError: assert ('ts_roll_mean_of_means_w5' in ts_basic_mean                          35.345271\\nts_basic_std                           18.455405\\nts_basic_median     ...   NaN\\nts_roll_std_of_stds_w20                      NaN\\nts_evt_total_events_in_period           0.000000\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\n +    where <function isna at 0x7f6a9b78dea0> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 181, "message": "AssertionError"}], "longrepr": "normal_series = 2023-01-01    -0.387462\n2023-01-02     5.100069\n2023-01-03     4.861261\n2023-01-04     9.409934\n2023-01-05    14.43335....520940\n2023-02-17    68.567350\n2023-02-18    67.836406\n2023-02-19    59.096677\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_normal(normal_series):\n        features = generate_all_features_for_series(normal_series, name=\"ts_\") # Test without event data\n>       assert 'ts_roll_mean_of_means_w5' in features and not pd.isna(features['ts_roll_mean_of_means_w5'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w5' in ts_basic_mean                          35.345271\\nts_basic_std                           18.455405\\nts_basic_median     ...   NaN\\nts_roll_std_of_stds_w20                      NaN\\nts_evt_total_events_in_period           0.000000\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\nE        +    where <function isna at 0x7f6a9b78dea0> = pd.isna\n\ntests/test_feature_engineering.py:181: AssertionError"}, "teardown": {"duration": 0.0005503769989445573, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_short_series", "lineno": 182, "outcome": "xfailed", "keywords": ["test_generate_all_features_short_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0014908320008544251, "outcome": "passed"}, "call": {"duration": 0.010305215999323991, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 186, "message": "AssertionError: assert ('ts_roll_mean_of_means_w4' in ts_basic_mean                        8.622002\\nts_basic_std                         6.609609\\nts_basic_median           ...         NaN\\nts_roll_std_of_stds_w20                   NaN\\nts_evt_total_events_in_period        0.000000\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\n +    where <function isna at 0x7f6a9b78dea0> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 186, "message": "AssertionError"}], "longrepr": "short_series = 2023-01-01    -1.973644\n2023-01-02     4.042522\n2023-01-03     5.419865\n2023-01-04     7.798384\n2023-01-05    10.649613\n2023-01-06    14.573981\n2023-01-07    19.670534\n2023-01-08     8.794762\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_short_series(short_series): # len 8\n        features = generate_all_features_for_series(short_series, name=\"ts_\")\n>       assert 'ts_roll_mean_of_means_w4' in features and not pd.isna(features['ts_roll_mean_of_means_w4'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w4' in ts_basic_mean                        8.622002\\nts_basic_std                         6.609609\\nts_basic_median           ...         NaN\\nts_roll_std_of_stds_w20                   NaN\\nts_evt_total_events_in_period        0.000000\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\nE        +    where <function isna at 0x7f6a9b78dea0> = pd.isna\n\ntests/test_feature_engineering.py:186: AssertionError"}, "teardown": {"duration": 0.0004898679999314481, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_very_short_series", "lineno": 188, "outcome": "xfailed", "keywords": ["test_generate_all_features_very_short_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0012130380000598961, "outcome": "passed"}, "call": {"duration": 0.008770774000367965, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 192, "message": "AssertionError: assert ('ts_roll_mean_of_means_w1' in ts_basic_mean                        3.868811\\nts_basic_std                         5.592826\\nts_basic_median           ...         NaN\\nts_roll_std_of_stds_w20                   NaN\\nts_evt_total_events_in_period        0.000000\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\n +    where <function isna at 0x7f6a9b78dea0> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 192, "message": "AssertionError"}], "longrepr": "very_short_series = 2023-01-01   -1.783848\n2023-01-02    3.990463\n2023-01-03    9.399820\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_very_short_series(very_short_series): # len 3\n        features = generate_all_features_for_series(very_short_series, name=\"ts_\")\n>       assert 'ts_roll_mean_of_means_w1' in features and not pd.isna(features['ts_roll_mean_of_means_w1'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w1' in ts_basic_mean                        3.868811\\nts_basic_std                         5.592826\\nts_basic_median           ...         NaN\\nts_roll_std_of_stds_w20                   NaN\\nts_evt_total_events_in_period        0.000000\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7f6a9b78dea0>(np.float64(nan))\nE        +    where <function isna at 0x7f6a9b78dea0> = pd.isna\n\ntests/test_feature_engineering.py:192: AssertionError"}, "teardown": {"duration": 0.0004426199993758928, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_empty_series", "lineno": 193, "outcome": "passed", "keywords": ["test_generate_all_features_empty_series", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006629270010307664, "outcome": "passed"}, "call": {"duration": 0.0013561880004999693, "outcome": "passed"}, "teardown": {"duration": 0.000213641000300413, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_constant_series", "lineno": 218, "outcome": "xfailed", "keywords": ["test_generate_all_features_constant_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008012060006876709, "outcome": "passed"}, "call": {"duration": 0.00877645000036864, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 222, "message": "assert np.float64(nan) == 0.0"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 222, "message": "AssertionError"}], "longrepr": "constant_series = 2023-01-01    5.0\n2023-01-02    5.0\n2023-01-03    5.0\n2023-01-04    5.0\n2023-01-05    5.0\n2023-01-06    5.0\n2023-01-07...  5.0\n2023-01-17    5.0\n2023-01-18    5.0\n2023-01-19    5.0\n2023-01-20    5.0\nFreq: D, Name: ConstantTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_constant_series(constant_series):\n        features = generate_all_features_for_series(constant_series, name=\"ts_\")\n>       assert features['ts_roll_mean_of_stds_w5'] == 0.0\nE       assert np.float64(nan) == 0.0\n\ntests/test_feature_engineering.py:222: AssertionError"}, "teardown": {"duration": 0.00044257799891056493, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_placeholder", "lineno": 10, "outcome": "passed", "keywords": ["test_placeholder", "test_main.py", "tests", "app", ""], "setup": {"duration": 0.0004223830001137685, "outcome": "passed"}, "call": {"duration": 0.00037474600139830727, "outcome": "passed"}, "teardown": {"duration": 0.00028568900052050594, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_get_series_summary_stats", "lineno": 15, "outcome": "passed", "keywords": ["test_get_series_summary_stats", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0010280149999744026, "outcome": "passed"}, "call": {"duration": 0.006563182001627865, "outcome": "passed"}, "teardown": {"duration": 0.00028670400024566334, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_get_missing_values_summary", "lineno": 26, "outcome": "passed", "keywords": ["test_get_missing_values_summary", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0008093399992503691, "outcome": "passed"}, "call": {"duration": 0.002584709000075236, "outcome": "passed"}, "teardown": {"duration": 0.00032702800126571674, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_non_stationary", "lineno": 33, "outcome": "passed", "keywords": ["test_perform_stationarity_test_non_stationary", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0008484289992338745, "outcome": "passed"}, "call": {"duration": 0.005067145999419154, "outcome": "passed"}, "teardown": {"duration": 0.0004244070005370304, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_random_noise", "lineno": 43, "outcome": "passed", "keywords": ["test_perform_stationarity_test_on_random_noise", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00025017299958562944, "outcome": "passed"}, "call": {"duration": 0.008300670999233262, "outcome": "passed"}, "teardown": {"duration": 0.0003786190009122947, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_trend_series", "lineno": 52, "outcome": "passed", "keywords": ["test_perform_stationarity_test_on_trend_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00019403799888095818, "outcome": "passed"}, "call": {"duration": 0.007785184001477319, "outcome": "passed"}, "teardown": {"duration": 0.00034133700137317646, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_empty_series", "lineno": 60, "outcome": "passed", "keywords": ["test_perform_stationarity_test_empty_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0002945380001619924, "outcome": "passed"}, "call": {"duration": 0.0005179929994483246, "outcome": "passed"}, "teardown": {"duration": 0.0002683629991224734, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_all_nan_series", "lineno": 65, "outcome": "passed", "keywords": ["test_perform_stationarity_test_all_nan_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0001966420004464453, "outcome": "passed"}, "call": {"duration": 0.0008366579986613942, "outcome": "passed"}, "teardown": {"duration": 0.0003059599985135719, "outcome": "passed"}}], "warnings": [{"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 21}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 22}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 21}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 22}, {"message": "invalid value encountered in divide", "category": "RuntimeWarning", "when": "runtest", "filename": "/home/swebot/.local/lib/python3.10/site-packages/statsmodels/tsa/stattools.py", "lineno": 702}]}