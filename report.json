{"created": 1748739888.680378, "duration": 4.5814642906188965, "exitcode": 0, "root": "/app", "environment": {}, "summary": {"passed": 53, "xfailed": 4, "total": 57, "collected": 57}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/test_anomalies.py", "outcome": "passed", "result": [{"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_global", "type": "Function", "lineno": 15}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_rolling", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_iqr", "type": "Function", "lineno": 38}, {"nodeid": "tests/test_anomalies.py::test_zscore_empty_series", "type": "Function", "lineno": 49}, {"nodeid": "tests/test_anomalies.py::test_iqr_all_nan_series", "type": "Function", "lineno": 55}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series", "type": "Function", "lineno": 61}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series_window", "type": "Function", "lineno": 68}]}, {"nodeid": "tests/test_database.py", "outcome": "passed", "result": [{"nodeid": "tests/test_database.py::test_connect_postgres_success", "type": "Function", "lineno": 13}, {"nodeid": "tests/test_database.py::test_connect_postgres_failure", "type": "Function", "lineno": 23}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_success", "type": "Function", "lineno": 31}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_failure", "type": "Function", "lineno": 43}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_hosts_success", "type": "Function", "lineno": 56}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_ping_false", "type": "Function", "lineno": 69}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_connection_error", "type": "Function", "lineno": 81}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_success", "type": "Function", "lineno": 108}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_no_hits", "type": "Function", "lineno": 128}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_error", "type": "Function", "lineno": 140}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_no_connection", "type": "Function", "lineno": 152}]}, {"nodeid": "tests/test_decomposition.py", "outcome": "passed", "result": [{"nodeid": "tests/test_decomposition.py::test_decompose_time_series_additive", "type": "Function", "lineno": 12}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_multiplicative", "type": "Function", "lineno": 20}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_datetimeindex", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_insufficient_data", "type": "Function", "lineno": 32}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_period_no_freq", "type": "Function", "lineno": 38}]}, {"nodeid": "tests/test_feature_engineering.py", "outcome": "passed", "result": [{"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_normal", "type": "Function", "lineno": 48}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_with_nans", "type": "Function", "lineno": 56}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_empty", "type": "Function", "lineno": 61}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_all_nan", "type": "Function", "lineno": 67}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_constant", "type": "Function", "lineno": 73}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_normal", "type": "Function", "lineno": 83}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_short", "type": "Function", "lineno": 88}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_very_short", "type": "Function", "lineno": 92}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_too_short", "type": "Function", "lineno": 96}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_empty", "type": "Function", "lineno": 101}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_normal", "type": "Function", "lineno": 105}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_constant", "type": "Function", "lineno": 111}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_very_short", "type": "Function", "lineno": 116}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_normal", "type": "Function", "lineno": 128}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_short_series_valid_lags", "type": "Function", "lineno": 133}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_short_series_invalid_lags", "type": "Function", "lineno": 138}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_very_short", "type": "Function", "lineno": 143}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_normal", "type": "Function", "lineno": 150}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_window_too_large", "type": "Function", "lineno": 156}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_normal", "type": "Function", "lineno": 164}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_with_nans", "type": "Function", "lineno": 180}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_short_series", "type": "Function", "lineno": 186}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_very_short_series", "type": "Function", "lineno": 214}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_empty_series", "type": "Function", "lineno": 231}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_all_nan_series", "type": "Function", "lineno": 243}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_constant_series", "type": "Function", "lineno": 249}]}, {"nodeid": "tests/test_main.py", "outcome": "passed", "result": [{"nodeid": "tests/test_main.py::test_placeholder", "type": "Function", "lineno": 10}]}, {"nodeid": "tests/test_profiling.py", "outcome": "passed", "result": [{"nodeid": "tests/test_profiling.py::test_get_series_summary_stats", "type": "Function", "lineno": 15}, {"nodeid": "tests/test_profiling.py::test_get_missing_values_summary", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_non_stationary", "type": "Function", "lineno": 33}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_random_noise", "type": "Function", "lineno": 43}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_trend_series", "type": "Function", "lineno": 52}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_empty_series", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_all_nan_series", "type": "Function", "lineno": 65}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/test_anomalies.py", "type": "Module"}, {"nodeid": "tests/test_database.py", "type": "Module"}, {"nodeid": "tests/test_decomposition.py", "type": "Module"}, {"nodeid": "tests/test_feature_engineering.py", "type": "Module"}, {"nodeid": "tests/test_main.py", "type": "Module"}, {"nodeid": "tests/test_profiling.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_global", "lineno": 15, "outcome": "passed", "keywords": ["test_detect_anomalies_zscore_global", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0026260530003128224, "outcome": "passed"}, "call": {"duration": 0.0034996730000784737, "outcome": "passed"}, "teardown": {"duration": 0.00023319800038734684, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_zscore_rolling", "lineno": 26, "outcome": "passed", "keywords": ["test_detect_anomalies_zscore_rolling", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0009176720004688832, "outcome": "passed"}, "call": {"duration": 0.0030733049998161732, "outcome": "passed"}, "teardown": {"duration": 0.0002021469999817782, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_detect_anomalies_iqr", "lineno": 38, "outcome": "passed", "keywords": ["test_detect_anomalies_iqr", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.0007384660002571763, "outcome": "passed"}, "call": {"duration": 0.003104629000517889, "outcome": "passed"}, "teardown": {"duration": 0.0002176870002585929, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_empty_series", "lineno": 49, "outcome": "passed", "keywords": ["test_zscore_empty_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00017969900000025518, "outcome": "passed"}, "call": {"duration": 0.0003885340001943405, "outcome": "passed"}, "teardown": {"duration": 0.0001735320001898799, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_iqr_all_nan_series", "lineno": 55, "outcome": "passed", "keywords": ["test_iqr_all_nan_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00022224099939194275, "outcome": "passed"}, "call": {"duration": 0.0004569409993564477, "outcome": "passed"}, "teardown": {"duration": 0.000202459000320232, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series", "lineno": 61, "outcome": "passed", "keywords": ["test_zscore_constant_series", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00018639599966263631, "outcome": "passed"}, "call": {"duration": 0.0016249189993686741, "outcome": "passed"}, "teardown": {"duration": 0.0001755699995555915, "outcome": "passed"}}, {"nodeid": "tests/test_anomalies.py::test_zscore_constant_series_window", "lineno": 68, "outcome": "passed", "keywords": ["test_zscore_constant_series_window", "test_anomalies.py", "tests", "app", ""], "setup": {"duration": 0.00017326100078207674, "outcome": "passed"}, "call": {"duration": 0.00318906699976651, "outcome": "passed"}, "teardown": {"duration": 0.0001864000005298294, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_postgres_success", "lineno": 13, "outcome": "passed", "keywords": ["test_connect_postgres_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00021265699979267083, "outcome": "passed"}, "call": {"duration": 0.0012585280001076171, "outcome": "passed"}, "teardown": {"duration": 0.00022959600028116256, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_postgres_failure", "lineno": 23, "outcome": "passed", "keywords": ["test_connect_postgres_failure", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001747920005072956, "outcome": "passed"}, "call": {"duration": 0.001525740000033693, "outcome": "passed"}, "teardown": {"duration": 0.00018072600050800247, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_success", "lineno": 31, "outcome": "passed", "keywords": ["test_fetch_postgres_data_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00022337799964589067, "outcome": "passed"}, "call": {"duration": 0.0019186710005669738, "outcome": "passed"}, "teardown": {"duration": 0.0001893799999379553, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_postgres_data_failure", "lineno": 43, "outcome": "passed", "keywords": ["test_fetch_postgres_data_failure", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00016850400061230175, "outcome": "passed"}, "call": {"duration": 0.0019905890003428794, "outcome": "passed"}, "teardown": {"duration": 0.00020556399977067485, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_hosts_success", "lineno": 56, "outcome": "passed", "keywords": ["test_connect_elasticsearch_hosts_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001795070002117427, "outcome": "passed"}, "call": {"duration": 0.002268767999339616, "outcome": "passed"}, "teardown": {"duration": 0.00020536200008791639, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_ping_false", "lineno": 69, "outcome": "passed", "keywords": ["test_connect_elasticsearch_ping_false", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00018939500023407163, "outcome": "passed"}, "call": {"duration": 0.001840988999902038, "outcome": "passed"}, "teardown": {"duration": 0.0001733170001898543, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_connect_elasticsearch_connection_error", "lineno": 81, "outcome": "passed", "keywords": ["test_connect_elasticsearch_connection_error", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00016813999991427409, "outcome": "passed"}, "call": {"duration": 0.0014637869999205577, "outcome": "passed"}, "teardown": {"duration": 0.00017041899991454557, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_success", "lineno": 108, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_success", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00022681000064039836, "outcome": "passed"}, "call": {"duration": 0.0030959570003687986, "outcome": "passed"}, "teardown": {"duration": 0.00016877300004125573, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_no_hits", "lineno": 128, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_no_hits", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001888249998955871, "outcome": "passed"}, "call": {"duration": 0.0035215150001022266, "outcome": "passed"}, "teardown": {"duration": 0.00020001899974886328, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_scan_error", "lineno": 140, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_scan_error", "__wrapped__", "patchings", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.00017271799970330903, "outcome": "passed"}, "call": {"duration": 0.0021261009997033398, "outcome": "passed"}, "teardown": {"duration": 0.00017499700061307522, "outcome": "passed"}}, {"nodeid": "tests/test_database.py::test_fetch_elasticsearch_data_no_connection", "lineno": 152, "outcome": "passed", "keywords": ["test_fetch_elasticsearch_data_no_connection", "test_database.py", "tests", "app", ""], "setup": {"duration": 0.0001917509998747846, "outcome": "passed"}, "call": {"duration": 0.0005149460002940032, "outcome": "passed"}, "teardown": {"duration": 0.0002158679999411106, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_additive", "lineno": 12, "outcome": "passed", "keywords": ["test_decompose_time_series_additive", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0009312600004705018, "outcome": "passed"}, "call": {"duration": 0.0015227300000333344, "outcome": "passed"}, "teardown": {"duration": 0.00021404800008895108, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_multiplicative", "lineno": 20, "outcome": "passed", "keywords": ["test_decompose_time_series_multiplicative", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.000685344999510562, "outcome": "passed"}, "call": {"duration": 0.0015769820001878543, "outcome": "passed"}, "teardown": {"duration": 0.00020683399998233654, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_datetimeindex", "lineno": 26, "outcome": "passed", "keywords": ["test_decompose_time_series_no_datetimeindex", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.0001714569998512161, "outcome": "passed"}, "call": {"duration": 0.00041134200000669807, "outcome": "passed"}, "teardown": {"duration": 0.00016635400061204564, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_insufficient_data", "lineno": 32, "outcome": "passed", "keywords": ["test_decompose_time_series_insufficient_data", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.000681666000673431, "outcome": "passed"}, "call": {"duration": 0.0005461069995362777, "outcome": "passed"}, "teardown": {"duration": 0.0001992719999179826, "outcome": "passed"}}, {"nodeid": "tests/test_decomposition.py::test_decompose_time_series_no_period_no_freq", "lineno": 38, "outcome": "passed", "keywords": ["test_decompose_time_series_no_period_no_freq", "test_decomposition.py", "tests", "app", ""], "setup": {"duration": 0.00023433299975295085, "outcome": "passed"}, "call": {"duration": 0.0031508519996350515, "outcome": "passed"}, "teardown": {"duration": 0.0002864859998226166, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_normal", "lineno": 48, "outcome": "passed", "keywords": ["test_extract_basic_stats_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0007854730001781718, "outcome": "passed"}, "call": {"duration": 0.0037963499999023043, "outcome": "passed"}, "teardown": {"duration": 0.0002048639998974977, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_with_nans", "lineno": 56, "outcome": "passed", "keywords": ["test_extract_basic_stats_with_nans", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0009603819999028929, "outcome": "passed"}, "call": {"duration": 0.003249618999689119, "outcome": "passed"}, "teardown": {"duration": 0.0002138479994755471, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_empty", "lineno": 61, "outcome": "passed", "keywords": ["test_extract_basic_stats_empty", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.00040175400044972776, "outcome": "passed"}, "call": {"duration": 0.0004441050004970748, "outcome": "passed"}, "teardown": {"duration": 0.0002068230005534133, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_all_nan", "lineno": 67, "outcome": "passed", "keywords": ["test_extract_basic_stats_all_nan", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006299099995885626, "outcome": "passed"}, "call": {"duration": 0.0004170319998593186, "outcome": "passed"}, "teardown": {"duration": 0.00023980599962669658, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_basic_stats_constant", "lineno": 73, "outcome": "passed", "keywords": ["test_extract_basic_stats_constant", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.000584474999413942, "outcome": "passed"}, "call": {"duration": 0.00337910300004296, "outcome": "passed"}, "teardown": {"duration": 0.00019862800036207773, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_normal", "lineno": 83, "outcome": "passed", "keywords": ["test_extract_trend_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.00078558899986092, "outcome": "passed"}, "call": {"duration": 0.0012208019998070085, "outcome": "passed"}, "teardown": {"duration": 0.00018422399989503901, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_short", "lineno": 88, "outcome": "passed", "keywords": ["test_extract_trend_features_short", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008094750000964268, "outcome": "passed"}, "call": {"duration": 0.000550232000023243, "outcome": "passed"}, "teardown": {"duration": 0.0002221689992438769, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_very_short", "lineno": 92, "outcome": "passed", "keywords": ["test_extract_trend_features_very_short", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008267060002253857, "outcome": "passed"}, "call": {"duration": 0.0005727959996875143, "outcome": "passed"}, "teardown": {"duration": 0.0002283630001329584, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_too_short", "lineno": 96, "outcome": "passed", "keywords": ["test_extract_trend_features_too_short", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.00017458199999964563, "outcome": "passed"}, "call": {"duration": 0.0005389650004872237, "outcome": "passed"}, "teardown": {"duration": 0.00022960600017540855, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_trend_features_empty", "lineno": 101, "outcome": "passed", "keywords": ["test_extract_trend_features_empty", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.00036478099991654744, "outcome": "passed"}, "call": {"duration": 0.00034451600004103966, "outcome": "passed"}, "teardown": {"duration": 0.0001971040001080837, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_normal", "lineno": 105, "outcome": "passed", "keywords": ["test_extract_volatility_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006285629997364595, "outcome": "passed"}, "call": {"duration": 0.000947688999985985, "outcome": "passed"}, "teardown": {"duration": 0.0001874390000011772, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_constant", "lineno": 111, "outcome": "passed", "keywords": ["test_extract_volatility_features_constant", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0005664239997713594, "outcome": "passed"}, "call": {"duration": 0.0009026730003824923, "outcome": "passed"}, "teardown": {"duration": 0.00023067599977366626, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_volatility_features_very_short", "lineno": 116, "outcome": "passed", "keywords": ["test_extract_volatility_features_very_short", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008489360006933566, "outcome": "passed"}, "call": {"duration": 0.0013107720005791634, "outcome": "passed"}, "teardown": {"duration": 0.0002053339994745329, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_normal", "lineno": 128, "outcome": "passed", "keywords": ["test_extract_autocorrelation_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006324630003291531, "outcome": "passed"}, "call": {"duration": 0.0005739259995607426, "outcome": "passed"}, "teardown": {"duration": 0.000185558999874047, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_short_series_valid_lags", "lineno": 133, "outcome": "passed", "keywords": ["test_extract_autocorrelation_features_short_series_valid_lags", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008911750001061591, "outcome": "passed"}, "call": {"duration": 0.0005322850001903134, "outcome": "passed"}, "teardown": {"duration": 0.00022143000023788773, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_short_series_invalid_lags", "lineno": 138, "outcome": "passed", "keywords": ["test_extract_autocorrelation_features_short_series_invalid_lags", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0008263420004368527, "outcome": "passed"}, "call": {"duration": 0.0005992020005578524, "outcome": "passed"}, "teardown": {"duration": 0.0002238770002804813, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_autocorrelation_features_very_short", "lineno": 143, "outcome": "passed", "keywords": ["test_extract_autocorrelation_features_very_short", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0010115519999089884, "outcome": "passed"}, "call": {"duration": 0.0008570879999751924, "outcome": "passed"}, "teardown": {"duration": 0.0002757009997367277, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_normal", "lineno": 150, "outcome": "passed", "keywords": ["test_extract_rolling_stats_features_normal", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006250599999475526, "outcome": "passed"}, "call": {"duration": 0.002591251000012562, "outcome": "passed"}, "teardown": {"duration": 0.0002677020002010977, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_extract_rolling_stats_features_window_too_large", "lineno": 156, "outcome": "passed", "keywords": ["test_extract_rolling_stats_features_window_too_large", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0007744969998384477, "outcome": "passed"}, "call": {"duration": 0.001324046000263479, "outcome": "passed"}, "teardown": {"duration": 0.00025168100000882987, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_normal", "lineno": 164, "outcome": "xfailed", "keywords": ["test_generate_all_features_normal", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0006720439996570349, "outcome": "passed"}, "call": {"duration": 0.012088807000509405, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 178, "message": "AssertionError: assert ('ts_roll_mean_of_means_w5' in ts_basic_mean                          34.820933\\nts_basic_std                           18.675459\\nts_basic_median     ...   NaN\\nts_roll_std_of_means_w20                     NaN\\nts_roll_std_of_stds_w20                      NaN\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\n +    where <function isna at 0x7fd23d0ad990> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 178, "message": "AssertionError"}], "longrepr": "normal_series = 2023-01-01     2.460635\n2023-01-02     2.432163\n2023-01-03     5.700846\n2023-01-04    11.524976\n2023-01-05    14.95865....975527\n2023-02-17    66.085144\n2023-02-18    67.978459\n2023-02-19    60.383104\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_normal(normal_series):\n        features = generate_all_features_for_series(normal_series, name=\"ts_\")\n        assert isinstance(features, pd.Series)\n        assert not features.empty\n        assert features.index.str.startswith(\"ts_\").all()\n        assert not features.isnull().all() # Should have some valid features\n        # Check if one feature from each category is present and not NaN\n        assert 'ts_basic_mean' in features and not pd.isna(features['ts_basic_mean'])\n        assert 'ts_trend_slope' in features and not pd.isna(features['ts_trend_slope'])\n        assert 'ts_vol_mean_abs_diff' in features and not pd.isna(features['ts_vol_mean_abs_diff'])\n        assert 'ts_acf_acf_lag_1' in features and not pd.isna(features['ts_acf_acf_lag_1'])\n        # Rolling window features depend on dynamic window selection, check one that's likely\n>       assert 'ts_roll_mean_of_means_w5' in features and not pd.isna(features['ts_roll_mean_of_means_w5'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w5' in ts_basic_mean                          34.820933\\nts_basic_std                           18.675459\\nts_basic_median     ...   NaN\\nts_roll_std_of_means_w20                     NaN\\nts_roll_std_of_stds_w20                      NaN\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\nE        +    where <function isna at 0x7fd23d0ad990> = pd.isna\n\ntests/test_feature_engineering.py:178: AssertionError"}, "teardown": {"duration": 0.00040286599960381864, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_with_nans", "lineno": 180, "outcome": "passed", "keywords": ["test_generate_all_features_with_nans", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0014515299999402487, "outcome": "passed"}, "call": {"duration": 0.009724638999614399, "outcome": "passed"}, "teardown": {"duration": 0.00026215399975626497, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_short_series", "lineno": 186, "outcome": "xfailed", "keywords": ["test_generate_all_features_short_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0011553240001376253, "outcome": "passed"}, "call": {"duration": 0.00849043200014421, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 193, "message": "AssertionError: assert ('ts_roll_mean_of_means_w4' in ts_basic_mean                        8.376658\\nts_basic_std                         6.593572\\nts_basic_median           ...         NaN\\nts_roll_std_of_means_w20                  NaN\\nts_roll_std_of_stds_w20                   NaN\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\n +    where <function isna at 0x7fd23d0ad990> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 193, "message": "AssertionError"}], "longrepr": "short_series = 2023-01-01    -2.438499\n2023-01-02     4.800476\n2023-01-03     6.554830\n2023-01-04     6.327714\n2023-01-05     8.173709\n2023-01-06    18.010279\n2023-01-07    16.988055\n2023-01-08     8.596701\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_short_series(short_series): # len 8\n        features = generate_all_features_for_series(short_series, name=\"ts_\")\n        assert not features.isnull().all()\n        # For short series, some features like larger window rolling stats or longer ACF lags might be NaN\n        # The dynamic window adjustment should pick a window like 8//2 = 4\n>       assert 'ts_roll_mean_of_means_w4' in features and not pd.isna(features['ts_roll_mean_of_means_w4'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w4' in ts_basic_mean                        8.376658\\nts_basic_std                         6.593572\\nts_basic_median           ...         NaN\\nts_roll_std_of_means_w20                  NaN\\nts_roll_std_of_stds_w20                   NaN\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\nE        +    where <function isna at 0x7fd23d0ad990> = pd.isna\n\ntests/test_feature_engineering.py:193: AssertionError"}, "teardown": {"duration": 0.0003540580000844784, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_very_short_series", "lineno": 214, "outcome": "xfailed", "keywords": ["test_generate_all_features_very_short_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0012432009998519788, "outcome": "passed"}, "call": {"duration": 0.007755753000310506, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 229, "message": "AssertionError: assert ('ts_roll_mean_of_means_w1' in ts_basic_mean                       1.410916\\nts_basic_std                        1.958221\\nts_basic_median             ...           NaN\\nts_roll_std_of_means_w20                 NaN\\nts_roll_std_of_stds_w20                  NaN\\ndtype: float64 and not True)\n +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\n +    where <function isna at 0x7fd23d0ad990> = pd.isna"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 229, "message": "AssertionError"}], "longrepr": "very_short_series = 2023-01-01   -0.737375\n2023-01-02    3.096015\n2023-01-03    1.874107\nFreq: D, Name: NormalTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_very_short_series(very_short_series): # len 3\n        features = generate_all_features_for_series(very_short_series, name=\"ts_\")\n        assert not features.isnull().all() # Basic stats should still work\n        assert 'ts_basic_mean' in features and not pd.isna(features['ts_basic_mean'])\n        # Trend slope on cleaned series (could be 2 or 3 points)\n        cleaned_vs = very_short_series.dropna()\n        if len(cleaned_vs) >= 2:\n          assert 'ts_trend_slope' in features and not pd.isna(features['ts_trend_slope'])\n        else:\n          assert 'ts_trend_slope' in features and pd.isna(features['ts_trend_slope'])\n    \n        # Dynamic window should be 3//2 = 1\n        # This is one of the failing assertions:\n>       assert 'ts_roll_mean_of_means_w1' in features and not pd.isna(features['ts_roll_mean_of_means_w1'])\nE       AssertionError: assert ('ts_roll_mean_of_means_w1' in ts_basic_mean                       1.410916\\nts_basic_std                        1.958221\\nts_basic_median             ...           NaN\\nts_roll_std_of_means_w20                 NaN\\nts_roll_std_of_stds_w20                  NaN\\ndtype: float64 and not True)\nE        +  where True = <function isna at 0x7fd23d0ad990>(np.float64(nan))\nE        +    where <function isna at 0x7fd23d0ad990> = pd.isna\n\ntests/test_feature_engineering.py:229: AssertionError"}, "teardown": {"duration": 0.00034180100010416936, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_empty_series", "lineno": 231, "outcome": "passed", "keywords": ["test_generate_all_features_empty_series", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.0005299940003169468, "outcome": "passed"}, "call": {"duration": 0.001272630000130448, "outcome": "passed"}, "teardown": {"duration": 0.0002625229999466683, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_all_nan_series", "lineno": 243, "outcome": "passed", "keywords": ["test_generate_all_features_all_nan_series", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.000887168000190286, "outcome": "passed"}, "call": {"duration": 0.0013299680003910908, "outcome": "passed"}, "teardown": {"duration": 0.00022156399973027874, "outcome": "passed"}}, {"nodeid": "tests/test_feature_engineering.py::test_generate_all_features_constant_series", "lineno": 249, "outcome": "xfailed", "keywords": ["test_generate_all_features_constant_series", "xfail", "pytestmark", "test_feature_engineering.py", "tests", "app", ""], "setup": {"duration": 0.000696058999892557, "outcome": "passed"}, "call": {"duration": 0.0078813469999659, "outcome": "skipped", "crash": {"path": "/app/tests/test_feature_engineering.py", "lineno": 258, "message": "assert np.float64(nan) == 0.0"}, "traceback": [{"path": "tests/test_feature_engineering.py", "lineno": 258, "message": "AssertionError"}], "longrepr": "constant_series = 2023-01-01    5.0\n2023-01-02    5.0\n2023-01-03    5.0\n2023-01-04    5.0\n2023-01-05    5.0\n2023-01-06    5.0\n2023-01-07...  5.0\n2023-01-17    5.0\n2023-01-18    5.0\n2023-01-19    5.0\n2023-01-20    5.0\nFreq: D, Name: ConstantTS, dtype: float64\n\n    @pytest.mark.xfail(reason=\"Known issue: specific aggregated rolling stats are unexpectedly NaN\")\n    def test_generate_all_features_constant_series(constant_series):\n        features = generate_all_features_for_series(constant_series, name=\"ts_\")\n        assert not features.isnull().all()\n        assert features['ts_basic_std'] == 0.0\n        assert features['ts_vol_mean_abs_diff'] == 0.0\n        # ACF for constant series: acf[0]=1, acf[l>0]=nan due to zero variance\n        assert pd.isna(features['ts_acf_acf_lag_1']) # Corrected: expect NaN for lag 1\n>       assert features['ts_roll_mean_of_stds_w5'] == 0.0\nE       assert np.float64(nan) == 0.0\n\ntests/test_feature_engineering.py:258: AssertionError"}, "teardown": {"duration": 0.00030320499990921235, "outcome": "passed"}}, {"nodeid": "tests/test_main.py::test_placeholder", "lineno": 10, "outcome": "passed", "keywords": ["test_placeholder", "test_main.py", "tests", "app", ""], "setup": {"duration": 0.00023000500004854985, "outcome": "passed"}, "call": {"duration": 0.00023476699971070047, "outcome": "passed"}, "teardown": {"duration": 0.00018929199995909585, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_get_series_summary_stats", "lineno": 15, "outcome": "passed", "keywords": ["test_get_series_summary_stats", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0007405050000670599, "outcome": "passed"}, "call": {"duration": 0.004832270999941102, "outcome": "passed"}, "teardown": {"duration": 0.0002059680000456865, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_get_missing_values_summary", "lineno": 26, "outcome": "passed", "keywords": ["test_get_missing_values_summary", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0006236199997147196, "outcome": "passed"}, "call": {"duration": 0.00212693599951308, "outcome": "passed"}, "teardown": {"duration": 0.00022400100078812102, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_non_stationary", "lineno": 33, "outcome": "passed", "keywords": ["test_perform_stationarity_test_non_stationary", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.0006219599999894854, "outcome": "passed"}, "call": {"duration": 0.004182202999800211, "outcome": "passed"}, "teardown": {"duration": 0.00024940499952208484, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_random_noise", "lineno": 43, "outcome": "passed", "keywords": ["test_perform_stationarity_test_on_random_noise", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00018714300040301168, "outcome": "passed"}, "call": {"duration": 0.007120080999811762, "outcome": "passed"}, "teardown": {"duration": 0.00020895400029985467, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_on_trend_series", "lineno": 52, "outcome": "passed", "keywords": ["test_perform_stationarity_test_on_trend_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00018450900006428128, "outcome": "passed"}, "call": {"duration": 0.006645884000135993, "outcome": "passed"}, "teardown": {"duration": 0.00018757599991658935, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_empty_series", "lineno": 60, "outcome": "passed", "keywords": ["test_perform_stationarity_test_empty_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00021568400006799493, "outcome": "passed"}, "call": {"duration": 0.0003532149994498468, "outcome": "passed"}, "teardown": {"duration": 0.00019957800031988882, "outcome": "passed"}}, {"nodeid": "tests/test_profiling.py::test_perform_stationarity_test_all_nan_series", "lineno": 65, "outcome": "passed", "keywords": ["test_perform_stationarity_test_all_nan_series", "test_profiling.py", "tests", "app", ""], "setup": {"duration": 0.00018170199928135844, "outcome": "passed"}, "call": {"duration": 0.0005704240002160077, "outcome": "passed"}, "teardown": {"duration": 0.00017411299995728768, "outcome": "passed"}}], "warnings": [{"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 32}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 33}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 32}, {"message": "Precision loss occurred in moment calculation due to catastrophic cancellation. This occurs when the data are nearly identical. Results may be unreliable.", "category": "RuntimeWarning", "when": "runtest", "filename": "/app/src/analysis_modules/feature_engineering.py", "lineno": 33}, {"message": "invalid value encountered in divide", "category": "RuntimeWarning", "when": "runtest", "filename": "/home/swebot/.local/lib/python3.10/site-packages/statsmodels/tsa/stattools.py", "lineno": 702}]}